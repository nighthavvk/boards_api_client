/*!
 * simple_and_light_grunt_boilerplate
 * Simple and Light Front-end Grunt Boilerplate
 * https://github.com/nighthavvk
 * @author Maks Charuk
 * @version 0.1.0
 * Copyright 2016. MIT licensed.
 */
var BoardJS = {
  Classes: {},
  Actions: {},
  ApiClients: {},
  Components: {},
  Instances: {},
  Configs: {
    Api: {
      BaseUrl: 'https://boards-api.herokuapp.com/',
      get BoardsUrl () { return this.BaseUrl + 'boards/'; },
      get ListsUrl () { return this.BaseUrl + 'lists/'; },
      get TicketsUrl () { return this.BaseUrl + 'tickets/'; }
    },
    Constants: {}
  },
  Init: {}
}

function extend(a, b) {
  for (var key in b)
  if (b.hasOwnProperty(key))
    a[key] = b[key];
  return a;
}

BoardJS.Classes.Action = function(props) {
  this.props = props != null ? props : {};
  if (this.props.container != null) {
    this.$container = this.props.container;
  } else {
    if (this.props.containerID != null) {
      this.containerID = props.containerID;
    } else if (this.defaultContainerID != null) {
      this.containerID = this.defaultContainerID;
    }
    if (this.containerID != null) {
      this.$container = $(this.containerID);
    } else {
      console.log('Container or containerID is unspecified');
    }
  }
  if (this.$container.length) {
    this._initVariables();
    this._initUI();
    this._initPlugins();
    this._initEventListeners();
  }
}

BoardJS.Classes.Action.prototype.defaultContainerID = void 0;

BoardJS.Classes.Action.prototype._initVariables = function() {
  return false;
};

BoardJS.Classes.Action.prototype._initUI = function() {
  return false;
};

BoardJS.Classes.Action.prototype._initPlugins = function() {
  return false;
};

BoardJS.Classes.Action.prototype._initEventListeners = function() {
  return false;
};

// Abstract class
BoardJS.Classes.ApiClient = function () {
  this.xhr = (window.XMLHttpRequest) ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHttp");
}

BoardJS.Classes.ApiClient.prototype.request = function (method, url, callback, error) {
  this.xhr.onreadystatechange = function () {
    // this === this.xhr
    if (this.readyState === 4) {
      if (this.status === 200) {
        if (typeof callback === 'function') {
          callback(this.responseText, this);
        };
      } else {
        if (typeof error === 'function') {
          error(this.statusText, this);
        };
      }
    };
  };
  this.xhr.open(method, url, true);
  this.xhr.send();
}

BoardJS.Classes.ApiClient.prototype.get = function (url, callback, error) {
  this.request('get', url, callback, error);
}

// Abstract class
BoardJS.Classes.Component = function (props, containerID) {
  this.containerID = (typeof containerID === 'undefined') ? null : containerID;
  this.props = props;

  this.id = this.props.id;
  this.DOMid = "data-" + this.constructor.name.toLowerCase() + "=" + "'" + this.props.id + "'";
  this.state = new BoardJS.Classes.State();
}

BoardJS.Classes.Component.prototype.prepareData = function (data, Type) {
  var preparedData = [];
  data.forEach(function(dataItem, i, arr) { preparedData.push(new Type(dataItem)) });
  return preparedData;
};

BoardJS.Classes.Component.prototype.prepareValue = function (value) {
  return (typeof value === 'undefined' || value == '') ? '-' : value;
};

BoardJS.Classes.Component.prototype.render = function () {
};

BoardJS.Classes.Events = function () {
  this.events = {};
}

BoardJS.Classes.Events.prototype.on = function (eventName, fn) {
  this.events[eventName] = this.events[eventName] || []
  this.events[eventName].push(fn)
};

BoardJS.Classes.Events.prototype.off = function (eventName, fn) {
  if (this.events[eventName]) {
    for (var i = 0; i < this.events[eventName].length; i++) {
      if (this.events[eventName][i] === fn) {
        this.events[eventName].splice(i, 1);
        break;
      }
    };
  }
};

BoardJS.Classes.Events.prototype.emit = function (eventName, data) {
  if (this.events[eventName]) {
    this.events[eventName].forEach(function (fn) {
      fn(data);
    });
  }
};

BoardJS.Instances.Events = new BoardJS.Classes.Events()

// Abstract class
BoardJS.Classes.State = function (props) {
  this.props = (typeof props === 'undefined') ? {} : props;

  this.callback = function () {
    return false;
  }
}

BoardJS.Classes.State.prototype.onUpdate = function (callback) {
  this.callback = callback;
}

BoardJS.Classes.State.prototype.update = function (nextProps) {
  this.callback(extend(this.props, nextProps));
}

BoardJS.ApiClients.BoardsApi = function () {
  BoardJS.Classes.ApiClient.apply(this, arguments);
}

BoardJS.ApiClients.BoardsApi.prototype = Object.create(BoardJS.Classes.ApiClient.prototype);
BoardJS.ApiClients.BoardsApi.prototype.constructor = BoardJS.ApiClients.BoardsApi;

BoardJS.ApiClients.BoardsApi.prototype.getBoards = function (callback, error) {
  this.get(BoardJS.Configs.Api.BaseUrl + 'boards/1', callback, error);
}

BoardJS.Components.App = function () {
  BoardJS.Classes.Component.apply(this, arguments);
}

BoardJS.Components.App.prototype = Object.create(BoardJS.Classes.Component.prototype);
BoardJS.Components.App.prototype.constructor = BoardJS.Components.App;

BoardJS.Components.App.prototype.render = function () {
  BoardJS.Classes.Component.prototype.render.apply(this, arguments);
  var board = new BoardJS.Components.Board(this.props);
  document.getElementById(this.containerID).innerHTML = board.render();
};

BoardJS.Components.Board = function (props) {
  BoardJS.Classes.Component.apply(this, arguments);

  this.name = props.name;
  this.lists = this.prepareData(props.lists, BoardJS.Components.List);
}

BoardJS.Components.Board.prototype = Object.create(BoardJS.Classes.Component.prototype);
BoardJS.Components.Board.prototype.constructor = BoardJS.Components.Board;

BoardJS.Components.Board.prototype.render = function () {
  BoardJS.Classes.Component.prototype.render.apply(this, arguments);

  var listsTemplate = '';
  this.lists.forEach(function(list, i ,arr) {
    listsTemplate += "<li class='board__list-item'> \
                        " + list.render() + " \
                      </li>";
  })
  var template = "<div class='board' " + this.DOMid + "> \
                    <div class='board__title-wrapper js-editable-field' \
                      data-placeholder='Set your Board title' \
                      data-url=" + BoardJS.Configs.Api.BoardsUrl + this.id + " \
                      data-type='PUT'> \
                      <span class='js-text-wrapper'> \
                        <h2 class='board__title editable-field__text js-text'>" + this.prepareValue(this.name) + "</h2> \
                      </span> \
                      <span class='js-field-wrapper hidden'> \
                        <input class='editable-field__field js-field' name='board[name]' value=" +  this.prepareValue(this.name) + " /> \
                      </span> \
                    </div> \
                    <div class='board__content'> \
                      <ul class='board__list'> \
                        " + listsTemplate + " \
                      </ul> \
                    </div> \
                  </div>";
  return template;
};

BoardJS.Components.List = function (props) {
  BoardJS.Classes.Component.apply(this, arguments);

  this.name = props.name;
  this.tickets = this.prepareData(props.tickets, BoardJS.Components.Ticket);
}

BoardJS.Components.List.prototype = Object.create(BoardJS.Classes.Component.prototype);
BoardJS.Components.List.prototype.constructor = BoardJS.Components.List;

BoardJS.Components.List.prototype.render = function () {
  BoardJS.Classes.Component.prototype.render.apply(this, arguments);

  var ticketsTemplate = '';
  this.tickets.forEach(function(ticket, i ,arr) {
    ticketsTemplate += "<li class='list__list-item js-draggable'> \
                          " + ticket.render() + " \
                        </li>";
  })
  var template = "<div class='list' " + this.DOMid + "> \
                    <div class='list__title-wrapper js-editable-field' \
                      data-placeholder='Set your List title' \
                      data-url=" + BoardJS.Configs.Api.ListsUrl + this.id + " \
                      data-type='PUT'> \
                      <div class='js-text-wrapper'> \
                        <h3 class='list__title editable-field__text js-text'>" + this.prepareValue(this.name) + "</h3> \
                      </div> \
                      <div class='js-field-wrapper hidden'> \
                        <input class='editable-field__field js-field' name='list[name]' value=" +  this.prepareValue(this.name) + " /> \
                      </div> \
                    </div> \
                    <ul class='list__list js-droppable'> \
                      " + ticketsTemplate + " \
                    </ul> \
                  </div>";
  return template;
};

BoardJS.Components.Ticket = function (props) {
  BoardJS.Classes.Component.apply(this, arguments);

  this.id = props.id;
  this.name = props.name;
  this.description = props.description;
}

BoardJS.Components.Ticket.prototype = Object.create(BoardJS.Classes.Component.prototype);
BoardJS.Components.Ticket.prototype.constructor = BoardJS.Components.Ticket;

BoardJS.Components.Ticket.prototype.render = function () {
  BoardJS.Classes.Component.prototype.render.apply(this, arguments);

  var nameUrl = BoardJS.Configs.Api.BaseUrl

  var template = "<div class='ticket js-ticket' " + this.DOMid + "> \
                    <div class='ticket__name-wrapper js-editable-field' \
                      data-placeholder='Set your Ticket name' \
                      data-url=" + BoardJS.Configs.Api.TicketsUrl + this.id + " \
                      data-type='PUT'> \
                      <div class='js-text-wrapper'> \
                        <h5 class='ticket__name editable-field__text js-text'>" + this.prepareValue(this.name) + "</h5> \
                      </div> \
                      <div class='js-field-wrapper hidden'> \
                        <input class='editable-field__field js-field' name='ticket[name]' value=" +  this.prepareValue(this.name) + " /> \
                      </div> \
                    </div> \
                    <div class='ticket__description-wrapper js-editable-field' \
                      data-placeholder='Set your Ticket description' \
                      data-url=" + BoardJS.Configs.Api.TicketsUrl + this.id + " \
                      data-type='PUT'> \
                      <div class='js-text-wrapper'> \
                        <p class='ticket__description editable-field__text js-text'>" + this.prepareValue(this.description) + "</p> \
                      </div> \
                      <div class='js-field-wrapper hidden'> \
                        <textarea class='editable-field__field js-field' name='ticket[description]'>" + this.prepareValue(this.description) + "</textarea> \
                      </div> \
                    </div> \
                  </div>"
  return template;
};

BoardJS.Actions.DragManager = new function() {

  /**
   * составной объект для хранения информации о переносе:
   * {
   *   elem - элемент, на котором была зажата мышь
   *   avatar - аватар
   *   downX/downY - координаты, на которых был mousedown
   *   shiftX/shiftY - относительный сдвиг курсора от угла элемента
   * }
   */

  var dragObject = {};

  var self = this;

  function onMouseDown(e) {

    if (e.which != 1) return;

    var elem = e.target.closest('.js-draggable');
    if (!elem) return;

    dragObject.elem = elem;

    beforeDragging(dragObject.elem);

    // запомним, что элемент нажат на текущих координатах pageX/pageY
    dragObject.downX = e.pageX;
    dragObject.downY = e.pageY;

    return false;
  }

  function onMouseMove(e) {
    if (!dragObject.elem) return; // элемент не зажат

    if (!dragObject.avatar) { // если перенос не начат...
      var moveX = e.pageX - dragObject.downX;
      var moveY = e.pageY - dragObject.downY;

      // если мышь передвинулась в нажатом состоянии недостаточно далеко
      if (Math.abs(moveX) < 3 && Math.abs(moveY) < 3) {
        return;
      }


      duringDragging(dragObject.elem);
      // начинаем перенос
      dragObject.avatar = createAvatar(e); // создать аватар
      if (!dragObject.avatar) { // отмена переноса, нельзя "захватить" за эту часть элемента
        dragObject = {};
        return;
      }

      // аватар создан успешно
      // создать вспомогательные свойства shiftX/shiftY
      var coords = getCoords(dragObject.avatar);
      dragObject.shiftX = dragObject.downX - coords.left;
      dragObject.shiftY = dragObject.downY - coords.top;

      startDrag(e); // отобразить начало переноса
    }

    // отобразить перенос объекта при каждом движении мыши
    dragObject.avatar.style.left = e.pageX - dragObject.shiftX + 'px';
    dragObject.avatar.style.top = e.pageY - dragObject.shiftY + 'px';

    return false;
  }

  function onMouseUp(e) {
    if (dragObject.avatar) { // если перенос идет
      finishDrag(e);
    }

    // перенос либо не начинался, либо завершился
    // в любом случае очистим "состояние переноса" dragObject
    dragObject = {};
  }

  function finishDrag(e) {
    afterDragging(dragObject.elem);
    dragObject.avatar.rollback();
    var dropElem = findDroppable(e);

    if (!dropElem) {
      self.onDragCancel(dragObject);
    } else {
      self.onDragEnd(dragObject, dropElem);
    }
  }

  function createAvatar(e) {

    // запомнить старые свойства, чтобы вернуться к ним при отмене переноса
    var avatar = dragObject.elem;
    var old = {
      parent: avatar.parentNode,
      nextSibling: avatar.nextSibling,
      position: avatar.position || '',
      left: avatar.left || '',
      top: avatar.top || '',
      zIndex: avatar.zIndex || ''
    };

    // функция для отмены переноса
    avatar.rollback = function() {
      old.parent.insertBefore(avatar, old.nextSibling);
      avatar.style.position = old.position;
      avatar.style.left = old.left;
      avatar.style.top = old.top;
      avatar.style.zIndex = old.zIndex
    };

    return avatar;
  }

  function startDrag(e) {
    var avatar = dragObject.avatar;

    // инициировать начало переноса
    document.body.appendChild(avatar);
    avatar.style.zIndex = 9999;
    avatar.style.position = 'absolute';
  }

  function findDroppable(event) {
    // спрячем переносимый элемент
    dragObject.avatar.hidden = true;

    // получить самый вложенный элемент под курсором мыши
    var elem = document.elementFromPoint(event.clientX, event.clientY);

    // показать переносимый элемент обратно
    dragObject.avatar.hidden = false;

    if (elem == null) {
      // такое возможно, если курсор мыши "вылетел" за границу окна
      return null;
    }

    return elem.closest('.js-droppable');
  }

  function beforeDragging(elem) {
    elem.style.width = elem.offsetWidth + 'px';
  }

  function duringDragging(elem) {
    var elemClasses = elem.classList;
    if (!elemClasses.contains('dragging')) {
      elemClasses.add('dragging');
    }
  }

  function afterDragging(elem) {
    elem.style.width = 'auto';
  }

  document.onmousemove = onMouseMove;
  document.onmouseup = onMouseUp;
  document.onmousedown = onMouseDown;

  this.onDragEnd = function(dragObject, dropElem) {};
  this.onDragCancel = function(dragObject) {};

};


function getCoords(elem) { // кроме IE8-
  var box = elem.getBoundingClientRect();

  return {
    top: box.top + pageYOffset,
    left: box.left + pageXOffset
  };

}

BoardJS.Actions.EditableField = function (props) {
  BoardJS.Classes.Action.apply(this, arguments);
}

BoardJS.Actions.EditableField.prototype = Object.create(BoardJS.Classes.Action.prototype);
BoardJS.Actions.EditableField.prototype.constructor = BoardJS.Actions.EditableField;

BoardJS.Actions.EditableField.prototype._initVariables = function () {
  this.basicClass = '.js-editable-field';
  this.currData = {};
  this.prevData = {};
  this.state = void 0;
  return this.states = {
    inside: 'inside',
    insideAnother: 'insideAnother',
    outside: 'outside'
  };
};

BoardJS.Actions.EditableField.prototype._initEventListeners = function () {
  $(document).on ('click', (function (_this) {
    return function (e) {
      return _this.onClick(e);
    };
  })(this));
  return $(document).on ('click', this.basicClass, (function (_this) {
    return function (e) {
      e.stopImmediatePropagation ();
      return _this.onClick(e);
    };
  })(this));
};

BoardJS.Actions.EditableField.prototype.updateCurrData = function (newData) {
  this.updatePrevData(this.currData);
  return $.extend(this.currData, newData);
};

BoardJS.Actions.EditableField.prototype.updatePrevData = function (newData) {
  return $.extend(this.prevData, newData);
};

BoardJS.Actions.EditableField.prototype.updateState = function () {
  if (this.inputClicked() && !this.sameInputClicked() && this.prevTargetWasInput()) {
    return this.state = this.states.insideAnother;
  } else if (this.inputClicked()) {
    return this.state = this.states.inside;
  } else if (!this.inputClicked()) {
    return this.state = this.states.outside;
  }
};

BoardJS.Actions.EditableField.prototype.getNewData = function ($eTarget) {
  var newData;
  newData = {};
  newData.$eTarget = $eTarget;
  newData.$container = newData.$eTarget.closest(this.basicClass);
  newData.url = newData.$container.data('url');
  newData.type = newData.$container.data('type');
  newData.placeholder = newData.$container.data('placeholder');
  newData.$textWrapper = newData.$container.find('.js-text-wrapper');
  newData.$text = newData.$container.find('.js-text');
  newData.$fieldWrapper = newData.$container.find('.js-field-wrapper');
  newData.$field = newData.$container.find('.js-field');
  return newData;
};

BoardJS.Actions.EditableField.prototype.onClick = function (e) {
  var $eTarget, newData;
  $eTarget = $(e.target);
  newData = this.getNewData($eTarget);
  this.updateCurrData(newData);
  this.updateState();
  return this.handleClick();
};

BoardJS.Actions.EditableField.prototype.onEnter = function (e, data) {
  if (e.keyCode === 13) {
    e.preventDefault();
    return this.fieldHide(data);
  }
};

BoardJS.Actions.EditableField.prototype.handleClick = function () {
  if (this.state === this.states.inside) {
    return this.fieldShow(this.currData);
  } else if (this.state === this.states.insideAnother) {
    this.fieldHide(this.prevData);
    return this.fieldShow(this.currData);
  } else if (this.state === this.states.outside && this.prevTargetWasInput()) {
    return this.fieldHide(this.prevData);
  }
};

BoardJS.Actions.EditableField.prototype.handleAjaxRequest = function (data, url, type) {
  if ((data != null) && (url != null) && (type != null)) {
    return $.ajax({
      data: data,
      url: url,
      type: type
    });
  }
};

BoardJS.Actions.EditableField.prototype.inputClicked = function () {
  return this.currData.$container.length;
};

BoardJS.Actions.EditableField.prototype.sameInputClicked = function () {
  return this.currData.$container.is(this.prevData.$container);
};

BoardJS.Actions.EditableField.prototype.prevTargetWasInput = function () {
  return (this.prevData.$container != null) && this.prevData.$container.length;
};

BoardJS.Actions.EditableField.prototype.fieldShow = function (data) {
  if (data.$textWrapper.hasClass('hidden')) {
    return;
  }
  if (data.$field.outerWidth() < data.$textWrapper.outerWidth()) {
    data.$field.width(data.$textWrapper.width());
  }
  data.$textWrapper.addClass('hidden');
  data.$fieldWrapper.removeClass('hidden');
  data.$field.focus();
  if (data.$field.val() === data.placeholder) {
    data.$field.val('');
  }
  return data.$field.on ('keydown', (function (_this) {
    return function (e) {
      return _this.onEnter(e, data);
    };
  })(this));
};

BoardJS.Actions.EditableField.prototype.fieldHide = function (data) {
  var ajaxData;
  if (data.$fieldWrapper.hasClass('hidden')) {
    return;
  }
  data.$fieldWrapper.addClass('hidden');
  data.$textWrapper.removeClass('hidden');
  if (data.$field.val()) {
    data.$text.text(data.$field.val());
  } else {
    data.$text.text(data.placeholder);
  }
  ajaxData = {};
  ajaxData[data.$field.attr('name')] = data.$field.val();
  this.handleAjaxRequest(ajaxData, data.url, data.type);
  return data.$field.off('keydown', (function (_this) {
    return function (e) {
      return _this.onEnter(e, data);
    };
  })(this));
};

BoardJS.Init.InitDOM = function () {

  var renderApp = function (data, xhr) {
    var app = new BoardJS.Components.App(JSON.parse(data), 'app');
    app.render();
    BoardJS.Instances.Events.emit('DOMReady');
  }

  var showError = function (error, xhr) {
    document.getElementsByClassName('js-error-container')[0].className += ' -with-error';
    document.getElementsByClassName('js-error-message')[0].innerHTML = error || 'Error connection refused';
  }

  var boardsApi = new BoardJS.ApiClients.BoardsApi();
  boardsApi.getBoards(renderApp, showError);
}

BoardJS.Init.InitActions = function () {
  new BoardJS.Actions.EditableField({container: $(document)});
}

BoardJS.Init.InitDOM();
BoardJS.Instances.Events.on('DOMReady', BoardJS.Init.InitActions);
