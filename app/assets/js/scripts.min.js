/*!
 * simple_and_light_grunt_boilerplate
 * Simple and Light Front-end Grunt Boilerplate
 * https://github.com/nighthavvk
 * @author Maks Charuk
 * @version 0.1.0
 * Copyright 2016. MIT licensed.
 */
var Configs = {
  Api: {
    BaseUrl: 'https://boards-api.herokuapp.com/'
  },
  Constants: {},
  Instances: {}
}

// Abstract class
function ApiClient() {
  this.xhr = (window.XMLHttpRequest) ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHttp");
}

ApiClient.prototype.request = function (method, url, callback, error) {
  this.xhr.onreadystatechange = function () {
    // this === this.xhr
    if (this.readyState === 4) {
      if (this.status === 200) {
        if (typeof callback === 'function') {
          callback(this.responseText, this);
        };
      } else {
        if (typeof error === 'function') {
          error(this.statusText, this);
        };
      }
    };
  };
  this.xhr.open(method, url, true);
  this.xhr.send();
}

ApiClient.prototype.get = function (url, callback, error) {
  this.request('get', url, callback, error);
}

// Abstract class
function Component(props, containerID) {
  this.containerID = (typeof containerID === 'undefined') ? null : containerID;
  this.props = props;
}

Component.prototype.prepareData = function (data, Type) {
  var preparedData = [];
  data.forEach(function(dataItem, i, arr) { preparedData.push(new Type(dataItem)) });
  return preparedData;
};

Component.prototype.prepareValue = function (value) {
  return (typeof value === 'undefined') ? '-' : value;
};

Component.prototype.render = function () {

};

function BoardsApi() {
  ApiClient.apply(this, arguments);
}

BoardsApi.prototype = Object.create(ApiClient.prototype);
BoardsApi.prototype.constructor = BoardsApi;

BoardsApi.prototype.getBoards = function (callback, error) {
  this.get(Configs.Api.BaseUrl + "boards/1", callback, error);
}

function App() {
  Component.apply(this, arguments);
}

App.prototype = Object.create(Component.prototype);
App.prototype.constructor = App;

App.prototype.render = function () {
  Component.prototype.render.apply(this, arguments);
  var board = new Board(this.props);
  document.getElementById(this.containerID).innerHTML = board.render();
};

function Board(props) {
  Component.apply(this, arguments);

  this.name = props.name;
  this.lists = this.prepareData(props.lists, List);
}

Board.prototype = Object.create(Component.prototype);
Board.prototype.constructor = Board;

Board.prototype.render = function () {
  Component.prototype.render.apply(this, arguments);

  var listsTemplate = '';
  this.lists.forEach(function(list, i ,arr) {
    listsTemplate += "<li class='board__list-item'> \
                        " + list.render() + " \
                      </li>";
  })
  var template = "<div class='board'> \
                    <h2 class='board__title'>" + this.prepareValue(this.name) + "</h2> \
                    <div class='board__content'> \
                      <ul class='board__list'> \
                        " + listsTemplate + " \
                      </ul> \
                    </div> \
                  </div>";
  return template;
};

function List(props) {
  Component.apply(this, arguments);

  this.name = props.name;
  this.tickets = this.prepareData(props.tickets, Ticket);
}

List.prototype = Object.create(Component.prototype);
List.prototype.constructor = List;

List.prototype.render = function () {
  Component.prototype.render.apply(this, arguments);

  var ticketsTemplate = '';
  this.tickets.forEach(function(ticket, i ,arr) {
    ticketsTemplate += "<li class='list__list-item js-draggable'> \
                          " + ticket.render() + " \
                        </li>";
  })
  var template = "<div class='list'> \
                    <h3 class='list__title'>" + this.prepareValue(this.name) + "</h3> \
                    <ul class='list__list js-droppable'> \
                      " + ticketsTemplate + " \
                    </ul> \
                  </div>";
  return template;
};

function Ticket(props) {
  Component.apply(this, arguments);

  this.id = props.id;
  this.name = props.name;
  this.description = props.description;
}

Ticket.prototype = Object.create(Component.prototype);
Ticket.prototype.constructor = Ticket;

Ticket.prototype.render = function () {
  Component.prototype.render.apply(this, arguments);

  var template = "<div class='ticket'> \
                    <h5 class='ticket__name'> \
                      " + this.prepareValue(this.name) + " \
                    </h5> \
                    <p class='ticket__description'> \
                      " + this.prepareValue(this.description) + " \
                    </p> \
                  </div>"
  return template;
};

var DragManager = new function() {

  /**
   * составной объект для хранения информации о переносе:
   * {
   *   elem - элемент, на котором была зажата мышь
   *   avatar - аватар
   *   downX/downY - координаты, на которых был mousedown
   *   shiftX/shiftY - относительный сдвиг курсора от угла элемента
   * }
   */
  var dragObject = {};

  var self = this;

  function onMouseDown(e) {

    if (e.which != 1) return;

    var elem = e.target.closest('.js-draggable');
    if (!elem) return;

    dragObject.elem = elem;

    beforeDragging(dragObject.elem);

    // запомним, что элемент нажат на текущих координатах pageX/pageY
    dragObject.downX = e.pageX;
    dragObject.downY = e.pageY;

    return false;
  }

  function onMouseMove(e) {
    if (!dragObject.elem) return; // элемент не зажат

    if (!dragObject.avatar) { // если перенос не начат...
      var moveX = e.pageX - dragObject.downX;
      var moveY = e.pageY - dragObject.downY;

      // если мышь передвинулась в нажатом состоянии недостаточно далеко
      if (Math.abs(moveX) < 3 && Math.abs(moveY) < 3) {
        return;
      }


      duringDragging(dragObject.elem);
      // начинаем перенос
      dragObject.avatar = createAvatar(e); // создать аватар
      if (!dragObject.avatar) { // отмена переноса, нельзя "захватить" за эту часть элемента
        dragObject = {};
        return;
      }

      // аватар создан успешно
      // создать вспомогательные свойства shiftX/shiftY
      var coords = getCoords(dragObject.avatar);
      dragObject.shiftX = dragObject.downX - coords.left;
      dragObject.shiftY = dragObject.downY - coords.top;

      startDrag(e); // отобразить начало переноса
    }

    // отобразить перенос объекта при каждом движении мыши
    dragObject.avatar.style.left = e.pageX - dragObject.shiftX + 'px';
    dragObject.avatar.style.top = e.pageY - dragObject.shiftY + 'px';

    return false;
  }

  function onMouseUp(e) {
    if (dragObject.avatar) { // если перенос идет
      finishDrag(e);
    }

    // перенос либо не начинался, либо завершился
    // в любом случае очистим "состояние переноса" dragObject
    dragObject = {};
  }

  function finishDrag(e) {
    afterDragging(dragObject.elem);
    dragObject.avatar.rollback();
    var dropElem = findDroppable(e);

    if (!dropElem) {
      self.onDragCancel(dragObject);
    } else {
      self.onDragEnd(dragObject, dropElem);
    }
  }

  function createAvatar(e) {

    // запомнить старые свойства, чтобы вернуться к ним при отмене переноса
    var avatar = dragObject.elem;
    var old = {
      parent: avatar.parentNode,
      nextSibling: avatar.nextSibling,
      position: avatar.position || '',
      left: avatar.left || '',
      top: avatar.top || '',
      zIndex: avatar.zIndex || ''
    };

    // функция для отмены переноса
    avatar.rollback = function() {
      old.parent.insertBefore(avatar, old.nextSibling);
      avatar.style.position = old.position;
      avatar.style.left = old.left;
      avatar.style.top = old.top;
      avatar.style.zIndex = old.zIndex
    };

    return avatar;
  }

  function startDrag(e) {
    var avatar = dragObject.avatar;

    // инициировать начало переноса
    document.body.appendChild(avatar);
    avatar.style.zIndex = 9999;
    avatar.style.position = 'absolute';
  }

  function findDroppable(event) {
    // спрячем переносимый элемент
    dragObject.avatar.hidden = true;

    // получить самый вложенный элемент под курсором мыши
    var elem = document.elementFromPoint(event.clientX, event.clientY);

    // показать переносимый элемент обратно
    dragObject.avatar.hidden = false;

    if (elem == null) {
      // такое возможно, если курсор мыши "вылетел" за границу окна
      return null;
    }

    return elem.closest('.js-droppable');
  }

  function beforeDragging(elem) {
    elem.style.width = elem.offsetWidth + 'px';
  }

  function duringDragging(elem) {
    var elemClasses = elem.classList;
    if (!elemClasses.contains('dragging')) {
      elemClasses.add('dragging');
    }
  }

  function afterDragging(elem) {
    elem.style.width = 'auto';
  }

  document.onmousemove = onMouseMove;
  document.onmouseup = onMouseUp;
  document.onmousedown = onMouseDown;

  this.onDragEnd = function(dragObject, dropElem) {};
  this.onDragCancel = function(dragObject) {};

};


function getCoords(elem) { // кроме IE8-
  var box = elem.getBoundingClientRect();

  return {
    top: box.top + pageYOffset,
    left: box.left + pageXOffset
  };

}

var renderApp = function (data, xhr) {
  var app = new App(JSON.parse(data), 'app');
  app.render();
}

var showError = function (error, xhr) {
  document.getElementsByClassName('js-error-container')[0].className += ' -with-error';
  document.getElementsByClassName('js-error-message')[0].innerHTML = error || 'Error connection refused';
}

var boardsApi = new BoardsApi();
boardsApi.getBoards(renderApp, showError);
